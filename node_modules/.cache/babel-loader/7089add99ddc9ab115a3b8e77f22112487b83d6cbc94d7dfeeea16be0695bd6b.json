{"ast":null,"code":"var _jsxFileName = \"/Users/andrew/Documents/GitHub/music-player/src/components/MusicPlayer.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport AnimatedBackground from './AnimatedBackground';\nimport LavaLampBlobs from './LavaLampBlobs';\nimport Controls from './Controls'; // Import the new Controls component\nimport { getPalette } from 'color-thief-react';\nimport '../styles/MusicPlayer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MusicPlayer = () => {\n  _s();\n  // State for the player\n  const [currentTrack, setCurrentTrack] = useState({\n    title: 'Song Title',\n    artist: 'Artist Name',\n    albumArt: 'path/to/default-album-art.jpg',\n    audioFile: 'path/to/audio-file.mp3'\n  });\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [volume, setVolume] = useState(0.7);\n  const [isMuted, setIsMuted] = useState(false);\n  const [isRepeat, setIsRepeat] = useState(false);\n  const [isShuffle, setIsShuffle] = useState(false);\n  const [colors, setColors] = useState(['#355c7d', '#6c5b7b', '#c06c84', '#f67280', '#f8b195']);\n  const audioRef = useRef(null);\n\n  // Event handlers\n  const togglePlay = () => {\n    if (isPlaying) {\n      audioRef.current.pause();\n    } else {\n      audioRef.current.play();\n    }\n    setIsPlaying(!isPlaying);\n  };\n  const skipForward = () => {\n    // Logic for skipping to next track\n    console.log('Skip forward');\n  };\n  const skipBackward = () => {\n    // Logic for going to previous track\n    console.log('Skip backward');\n  };\n  const handleTimeChange = e => {\n    const newTime = parseFloat(e.target.value);\n    setCurrentTime(newTime);\n    audioRef.current.currentTime = newTime;\n  };\n  const handleVolumeChange = e => {\n    const newVolume = parseFloat(e.target.value);\n    setVolume(newVolume);\n    audioRef.current.volume = newVolume;\n    if (newVolume === 0) {\n      setIsMuted(true);\n    } else if (isMuted) {\n      setIsMuted(false);\n    }\n  };\n  const toggleMute = () => {\n    if (isMuted) {\n      audioRef.current.volume = volume;\n      setIsMuted(false);\n    } else {\n      audioRef.current.volume = 0;\n      setIsMuted(true);\n    }\n  };\n  const toggleRepeat = () => {\n    setIsRepeat(!isRepeat);\n    audioRef.current.loop = !isRepeat;\n  };\n  const toggleShuffle = () => {\n    setIsShuffle(!isShuffle);\n  };\n\n  // Update audio time\n  useEffect(() => {\n    const audio = audioRef.current;\n    const updateTime = () => {\n      setCurrentTime(audio.currentTime);\n      setDuration(audio.duration);\n    };\n    const handleEnded = () => {\n      setIsPlaying(false);\n      setCurrentTime(0);\n      if (isRepeat) {\n        audio.play();\n        setIsPlaying(true);\n      } else {\n        // Logic for playing next track or stopping\n        skipForward();\n      }\n    };\n    audio.addEventListener('timeupdate', updateTime);\n    audio.addEventListener('loadedmetadata', updateTime);\n    audio.addEventListener('ended', handleEnded);\n    return () => {\n      audio.removeEventListener('timeupdate', updateTime);\n      audio.removeEventListener('loadedmetadata', updateTime);\n      audio.removeEventListener('ended', handleEnded);\n    };\n  }, [isRepeat]);\n\n  // Color extraction\n  useEffect(() => {\n    const fetchColors = async () => {\n      try {\n        // Extract base colors from the album art\n        const palette = await getPalette(currentTrack.albumArt, 3, 'hex', {\n          crossOrigin: 'anonymous',\n          quality: 10\n        });\n\n        // Filter out white/very light colors\n        const filteredBase = palette.filter(color => {\n          const hex = color.replace('#', '');\n          const r = parseInt(hex.substr(0, 2), 16);\n          const g = parseInt(hex.substr(2, 2), 16);\n          const b = parseInt(hex.substr(4, 2), 16);\n          const brightness = 0.299 * r + 0.587 * g + 0.114 * b;\n          return brightness < 180;\n        });\n\n        // If we have at least one good color, generate variations\n        if (filteredBase.length > 0) {\n          const generatedPalette = generateColorVariations(filteredBase);\n          setColors(generatedPalette);\n        } else {\n          // Fallback to preset vibrant colors\n          setColors(['#355c7d', '#6c5b7b', '#c06c84', '#f67280', '#f8b195']);\n        }\n      } catch (error) {\n        console.error('Failed to extract colors:', error);\n        setColors(['#355c7d', '#6c5b7b', '#c06c84', '#f67280', '#f8b195']);\n      }\n    };\n    fetchColors();\n  }, [currentTrack.albumArt]);\n\n  // Helper function to generate color variations\n  const generateColorVariations = baseColors => {\n    // Your color variation logic here\n    return [...baseColors];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"player-container\",\n    children: [/*#__PURE__*/_jsxDEV(AnimatedBackground, {\n      colors: colors\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LavaLampBlobs, {\n      colors: colors\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"music-player\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"album-art\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: currentTrack.albumArt,\n          alt: `${currentTrack.title} album art`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"track-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"track-title\",\n          children: currentTrack.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"track-artist\",\n          children: currentTrack.artist\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {\n        isPlaying: isPlaying,\n        togglePlay: togglePlay,\n        skipForward: skipForward,\n        skipBackward: skipBackward,\n        currentTime: currentTime,\n        duration: duration,\n        handleTimeChange: handleTimeChange,\n        volume: volume,\n        handleVolumeChange: handleVolumeChange,\n        toggleMute: toggleMute,\n        isMuted: isMuted,\n        isRepeat: isRepeat,\n        toggleRepeat: toggleRepeat,\n        isShuffle: isShuffle,\n        toggleShuffle: toggleShuffle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n        ref: audioRef,\n        src: currentTrack.audioFile,\n        preload: \"metadata\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 5\n  }, this);\n};\n_s(MusicPlayer, \"COSTyWwnpHhudSbrX9YL6qi/BZE=\");\n_c = MusicPlayer;\nexport default MusicPlayer;\nvar _c;\n$RefreshReg$(_c, \"MusicPlayer\");","map":{"version":3,"names":["React","useState","useRef","useEffect","AnimatedBackground","LavaLampBlobs","Controls","getPalette","jsxDEV","_jsxDEV","MusicPlayer","_s","currentTrack","setCurrentTrack","title","artist","albumArt","audioFile","isPlaying","setIsPlaying","currentTime","setCurrentTime","duration","setDuration","volume","setVolume","isMuted","setIsMuted","isRepeat","setIsRepeat","isShuffle","setIsShuffle","colors","setColors","audioRef","togglePlay","current","pause","play","skipForward","console","log","skipBackward","handleTimeChange","e","newTime","parseFloat","target","value","handleVolumeChange","newVolume","toggleMute","toggleRepeat","loop","toggleShuffle","audio","updateTime","handleEnded","addEventListener","removeEventListener","fetchColors","palette","crossOrigin","quality","filteredBase","filter","color","hex","replace","r","parseInt","substr","g","b","brightness","length","generatedPalette","generateColorVariations","error","baseColors","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","ref","preload","_c","$RefreshReg$"],"sources":["/Users/andrew/Documents/GitHub/music-player/src/components/MusicPlayer.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport AnimatedBackground from './AnimatedBackground';\nimport LavaLampBlobs from './LavaLampBlobs';\nimport Controls from './Controls'; // Import the new Controls component\nimport { getPalette } from 'color-thief-react';\nimport '../styles/MusicPlayer.css';\n\nconst MusicPlayer = () => {\n  // State for the player\n  const [currentTrack, setCurrentTrack] = useState({\n    title: 'Song Title',\n    artist: 'Artist Name',\n    albumArt: 'path/to/default-album-art.jpg',\n    audioFile: 'path/to/audio-file.mp3'\n  });\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [volume, setVolume] = useState(0.7);\n  const [isMuted, setIsMuted] = useState(false);\n  const [isRepeat, setIsRepeat] = useState(false);\n  const [isShuffle, setIsShuffle] = useState(false);\n  const [colors, setColors] = useState(['#355c7d', '#6c5b7b', '#c06c84', '#f67280', '#f8b195']);\n  \n  const audioRef = useRef(null);\n  \n  // Event handlers\n  const togglePlay = () => {\n    if (isPlaying) {\n      audioRef.current.pause();\n    } else {\n      audioRef.current.play();\n    }\n    setIsPlaying(!isPlaying);\n  };\n  \n  const skipForward = () => {\n    // Logic for skipping to next track\n    console.log('Skip forward');\n  };\n  \n  const skipBackward = () => {\n    // Logic for going to previous track\n    console.log('Skip backward');\n  };\n  \n  const handleTimeChange = (e) => {\n    const newTime = parseFloat(e.target.value);\n    setCurrentTime(newTime);\n    audioRef.current.currentTime = newTime;\n  };\n  \n  const handleVolumeChange = (e) => {\n    const newVolume = parseFloat(e.target.value);\n    setVolume(newVolume);\n    audioRef.current.volume = newVolume;\n    \n    if (newVolume === 0) {\n      setIsMuted(true);\n    } else if (isMuted) {\n      setIsMuted(false);\n    }\n  };\n  \n  const toggleMute = () => {\n    if (isMuted) {\n      audioRef.current.volume = volume;\n      setIsMuted(false);\n    } else {\n      audioRef.current.volume = 0;\n      setIsMuted(true);\n    }\n  };\n  \n  const toggleRepeat = () => {\n    setIsRepeat(!isRepeat);\n    audioRef.current.loop = !isRepeat;\n  };\n  \n  const toggleShuffle = () => {\n    setIsShuffle(!isShuffle);\n  };\n  \n  // Update audio time\n  useEffect(() => {\n    const audio = audioRef.current;\n    \n    const updateTime = () => {\n      setCurrentTime(audio.currentTime);\n      setDuration(audio.duration);\n    };\n    \n    const handleEnded = () => {\n      setIsPlaying(false);\n      setCurrentTime(0);\n      \n      if (isRepeat) {\n        audio.play();\n        setIsPlaying(true);\n      } else {\n        // Logic for playing next track or stopping\n        skipForward();\n      }\n    };\n    \n    audio.addEventListener('timeupdate', updateTime);\n    audio.addEventListener('loadedmetadata', updateTime);\n    audio.addEventListener('ended', handleEnded);\n    \n    return () => {\n      audio.removeEventListener('timeupdate', updateTime);\n      audio.removeEventListener('loadedmetadata', updateTime);\n      audio.removeEventListener('ended', handleEnded);\n    };\n  }, [isRepeat]);\n  \n  // Color extraction\n  useEffect(() => {\n    const fetchColors = async () => {\n      try {\n        // Extract base colors from the album art\n        const palette = await getPalette(currentTrack.albumArt, 3, 'hex', {\n          crossOrigin: 'anonymous',\n          quality: 10,\n        });\n        \n        // Filter out white/very light colors\n        const filteredBase = palette.filter(color => {\n          const hex = color.replace('#', '');\n          const r = parseInt(hex.substr(0, 2), 16);\n          const g = parseInt(hex.substr(2, 2), 16);\n          const b = parseInt(hex.substr(4, 2), 16);\n          const brightness = (0.299 * r + 0.587 * g + 0.114 * b);\n          return brightness < 180;\n        });\n        \n        // If we have at least one good color, generate variations\n        if (filteredBase.length > 0) {\n          const generatedPalette = generateColorVariations(filteredBase);\n          setColors(generatedPalette);\n        } else {    \n          // Fallback to preset vibrant colors\n          setColors(['#355c7d', '#6c5b7b', '#c06c84', '#f67280', '#f8b195']);\n        }\n      } catch (error) {\n        console.error('Failed to extract colors:', error);\n        setColors(['#355c7d', '#6c5b7b', '#c06c84', '#f67280', '#f8b195']);\n      }\n    };\n    \n    fetchColors();\n  }, [currentTrack.albumArt]);\n  \n  // Helper function to generate color variations\n  const generateColorVariations = (baseColors) => {\n    // Your color variation logic here\n    return [...baseColors];\n  };\n\n  return (\n    <div className=\"player-container\">\n      {/* Background with gradient animation */}\n      <AnimatedBackground colors={colors} />\n      \n      {/* Lava lamp blobs overlay */}\n      <LavaLampBlobs colors={colors} />\n      \n      {/* Music Player UI */}\n      <div className=\"music-player\">\n        <div className=\"album-art\">\n          <img src={currentTrack.albumArt} alt={`${currentTrack.title} album art`} />\n        </div>\n        \n        <div className=\"track-info\">\n          <h2 className=\"track-title\">{currentTrack.title}</h2>\n          <p className=\"track-artist\">{currentTrack.artist}</p>\n        </div>\n        \n        {/* Using our new Controls component */}\n        <Controls\n          isPlaying={isPlaying}\n          togglePlay={togglePlay}\n          skipForward={skipForward}\n          skipBackward={skipBackward}\n          currentTime={currentTime}\n          duration={duration}\n          handleTimeChange={handleTimeChange}\n          volume={volume}\n          handleVolumeChange={handleVolumeChange}\n          toggleMute={toggleMute}\n          isMuted={isMuted}\n          isRepeat={isRepeat}\n          toggleRepeat={toggleRepeat}\n          isShuffle={isShuffle}\n          toggleShuffle={toggleShuffle}\n        />\n        \n        {/* Hidden audio element */}\n        <audio\n          ref={audioRef}\n          src={currentTrack.audioFile}\n          preload=\"metadata\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default MusicPlayer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}