{"ast":null,"code":"var _jsxFileName = \"/Users/andrew/Documents/GitHub/music-player/src/components/MusicPlayer.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport LavaLampBlobs from './LavaLampBlobs.jsx';\nimport Controls from './Controls.jsx'; // Import the new Controls component\nimport { getPalette } from 'color-thief-react';\nimport AnimatedBackground from './AnimatedBackground';\nimport ProgressBar from './ProgressBar.jsx';\nimport tracks from '../data/tracks.js';\nimport '../styles/MusicPlayer.css';\nimport '../styles/AnimatedBackground.css';\nimport '../styles/Controls.css'; // Import the Controls CSS\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MusicPlayer = () => {\n  _s();\n  const [trackIndex, setTrackIndex] = useState(0);\n  const [currentTrack, setCurrentTrack] = useState(tracks[0]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [colors, setColors] = useState(null);\n  const [progress, setProgress] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [currentTime, setCurrentTime] = useState(0);\n  const audioRef = useRef(new Audio(currentTrack.audioSrc));\n  const intervalRef = useRef(null);\n\n  // Memoize the nextTrack function\n  const nextTrack = useCallback(() => {\n    const newIndex = (trackIndex + 1) % tracks.length;\n    setTrackIndex(newIndex);\n    setCurrentTrack(tracks[newIndex]);\n  }, [trackIndex]);\n\n  // Memoize previous track function as well\n  const prevTrack = useCallback(() => {\n    const newIndex = (trackIndex - 1 + tracks.length) % tracks.length;\n    setTrackIndex(newIndex);\n    setCurrentTrack(tracks[newIndex]);\n  }, [trackIndex]);\n\n  // Memoize the startTimer function\n  const startTimer = useCallback(() => {\n    clearInterval(intervalRef.current);\n    intervalRef.current = setInterval(() => {\n      if (audioRef.current.ended) {\n        nextTrack();\n      } else {\n        setCurrentTime(audioRef.current.currentTime);\n        setProgress(audioRef.current.currentTime / audioRef.current.duration * 100);\n      }\n    }, 1000);\n  }, [nextTrack]);\n\n  // Extract colors from album art\n  useEffect(() => {\n    const fetchColors = async () => {\n      try {\n        // Extract base colors from the album art\n        const palette = await getPalette(currentTrack.albumArt, 3, 'hex', {\n          crossOrigin: 'anonymous',\n          quality: 10\n        });\n\n        // Filter out white/very light colors\n        const filteredBase = palette.filter(color => {\n          const hex = color.replace('#', '');\n          const r = parseInt(hex.substr(0, 2), 16);\n          const g = parseInt(hex.substr(2, 2), 16);\n          const b = parseInt(hex.substr(4, 2), 16);\n          const brightness = 0.299 * r + 0.587 * g + 0.114 * b;\n          return brightness < 180;\n        });\n\n        // If we have at least one good color, generate variations\n        if (filteredBase.length > 0) {\n          const generatedPalette = generateColorVariations(filteredBase);\n          setColors(generatedPalette);\n        } else {\n          // Fallback to preset vibrant colors\n          setColors(['#355c7d', '#6c5b7b', '#c06c84', '#f67280', '#f8b195']);\n        }\n      } catch (error) {\n        console.error('Failed to extract colors:', error);\n        setColors(['#355c7d', '#6c5b7b', '#c06c84', '#f67280', '#f8b195']);\n      }\n    };\n    fetchColors();\n  }, [currentTrack.albumArt]);\n\n  // Your color variation generation function\n  const generateColorVariations = baseColors => {\n    // Your existing implementation\n    const result = [];\n\n    // Ensure we only work with non-white colors\n    const nonWhiteColors = baseColors.filter(color => {\n      const hex = color.replace('#', '');\n      const r = parseInt(hex.substr(0, 2), 16);\n      const g = parseInt(hex.substr(2, 2), 16);\n      const b = parseInt(hex.substr(4, 2), 16);\n      const brightness = 0.299 * r + 0.587 * g + 0.114 * b;\n\n      // Stricter brightness threshold to avoid light colors\n      return brightness < 160;\n    });\n\n    // If no valid colors, use preset colors\n    if (nonWhiteColors.length === 0) {\n      return ['#355c7d', '#6c5b7b', '#c06c84', '#f67280', '#f8b195', '#3f51b5', '#7e57c2', '#4caf50'];\n    }\n\n    // Add the filtered base colors\n    result.push(...nonWhiteColors);\n\n    // For each valid color, generate multiple variations\n    nonWhiteColors.forEach(color => {\n      // Extract RGB\n      const hex = color.replace('#', '');\n      let r = parseInt(hex.substr(0, 2), 16);\n      let g = parseInt(hex.substr(2, 2), 16);\n      let b = parseInt(hex.substr(4, 2), 16);\n\n      // Generate a darker variant\n      const darker = `#${Math.max(0, r - 40).toString(16).padStart(2, '0')}${Math.max(0, g - 40).toString(16).padStart(2, '0')}${Math.max(0, b - 40).toString(16).padStart(2, '0')}`;\n\n      // Generate a more saturated variant\n      // Increase the dominant color value\n      let max = Math.max(r, g, b);\n      let saturated;\n      if (max === r) {\n        saturated = `#${Math.min(255, r + 30).toString(16).padStart(2, '0')}${Math.max(0, g - 20).toString(16).padStart(2, '0')}${Math.max(0, b - 20).toString(16).padStart(2, '0')}`;\n      } else if (max === g) {\n        saturated = `#${Math.max(0, r - 20).toString(16).padStart(2, '0')}${Math.min(255, g + 30).toString(16).padStart(2, '0')}${Math.max(0, b - 20).toString(16).padStart(2, '0')}`;\n      } else {\n        saturated = `#${Math.max(0, r - 20).toString(16).padStart(2, '0')}${Math.max(0, g - 20).toString(16).padStart(2, '0')}${Math.min(255, b + 30).toString(16).padStart(2, '0')}`;\n      }\n\n      // Generate a shifted hue by rotating RGB values\n      const shifted = `#${Math.min(255, b).toString(16).padStart(2, '0')}${Math.min(255, r).toString(16).padStart(2, '0')}${Math.min(255, g).toString(16).padStart(2, '0')}`;\n      result.push(darker, saturated, shifted);\n    });\n\n    // Return up to 10 colors for more variety\n    return result.slice(0, 10);\n  };\n\n  // Handle track loading and setup\n  useEffect(() => {\n    audioRef.current.pause();\n    audioRef.current = new Audio(currentTrack.audioSrc);\n    audioRef.current.addEventListener('loadedmetadata', () => {\n      setDuration(audioRef.current.duration);\n    });\n    audioRef.current.addEventListener('ended', nextTrack);\n    if (isPlaying) {\n      audioRef.current.play().catch(e => console.error(\"Error playing audio:\", e));\n      startTimer();\n    }\n    return () => {\n      audioRef.current.removeEventListener('loadedmetadata', () => {});\n      audioRef.current.removeEventListener('ended', nextTrack);\n      clearInterval(intervalRef.current);\n    };\n  }, [currentTrack, isPlaying, nextTrack, startTimer]);\n\n  // Handle play/pause\n  useEffect(() => {\n    if (isPlaying) {\n      audioRef.current.play().catch(e => console.error(\"Error playing audio:\", e));\n      startTimer();\n    } else {\n      audioRef.current.pause();\n      clearInterval(intervalRef.current);\n    }\n  }, [isPlaying, startTimer]);\n\n  // Cleanup when component unmounts\n  useEffect(() => {\n    return () => {\n      audioRef.current.pause();\n      clearInterval(intervalRef.current);\n    };\n  }, []);\n\n  // Toggle play/pause\n  const togglePlay = () => {\n    setIsPlaying(!isPlaying);\n  };\n\n  // Change track position on progress bar click\n  const onProgressChange = e => {\n    const progressBar = e.currentTarget;\n    const clickPosition = (e.clientX - progressBar.getBoundingClientRect().left) / progressBar.offsetWidth;\n    const newTime = clickPosition * audioRef.current.duration;\n    audioRef.current.currentTime = newTime;\n    setCurrentTime(newTime);\n    setProgress(clickPosition * 100);\n  };\n  useEffect(() => {\n    if (colors && colors.length > 0) {\n      // Extract RGB from first color\n      const hex = colors[0].replace('#', '');\n      const r = parseInt(hex.substr(0, 2), 16);\n      const g = parseInt(hex.substr(2, 2), 16);\n      const b = parseInt(hex.substr(4, 2), 16);\n\n      // Update CSS variable for dynamic glow\n      document.documentElement.style.setProperty('--dynamic-glow-color', `${r}, ${g}, ${b}`);\n    }\n  }, [colors]);\n\n  // Format time\n  const formatTime = time => {\n    if (time && !isNaN(time)) {\n      const minutes = Math.floor(time / 60);\n      const seconds = Math.floor(time % 60);\n      return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\n    }\n    return \"0:00\";\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"player-container\",\n    children: [/*#__PURE__*/_jsxDEV(AnimatedBackground, {\n      colors: colors\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LavaLampBlobs, {\n      colors: colors\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"music-player\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"album-cover\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: currentTrack.albumArt,\n          alt: `${currentTrack.album} cover`,\n          crossOrigin: \"anonymous\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"track-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"track-title\",\n            children: currentTrack.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"track-artist\",\n            children: currentTrack.artist\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"progress-bar\",\n            onClick: onProgressChange,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"progress\",\n              style: {\n                width: `${progress}%`\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"time-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"current-time\",\n              children: formatTime(currentTime)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"total-time\",\n              children: formatTime(duration) || currentTrack.duration\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {\n          isPlaying: isPlaying,\n          togglePlay: togglePlay,\n          prevTrack: prevTrack,\n          nextTrack: nextTrack\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 240,\n    columnNumber: 5\n  }, this);\n};\n_s(MusicPlayer, \"BJDPkVzjwCivv/e6seQFGPHQbmA=\");\n_c = MusicPlayer;\nexport default MusicPlayer;\nvar _c;\n$RefreshReg$(_c, \"MusicPlayer\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","LavaLampBlobs","Controls","getPalette","AnimatedBackground","ProgressBar","tracks","jsxDEV","_jsxDEV","MusicPlayer","_s","trackIndex","setTrackIndex","currentTrack","setCurrentTrack","isPlaying","setIsPlaying","colors","setColors","progress","setProgress","duration","setDuration","currentTime","setCurrentTime","audioRef","Audio","audioSrc","intervalRef","nextTrack","newIndex","length","prevTrack","startTimer","clearInterval","current","setInterval","ended","fetchColors","palette","albumArt","crossOrigin","quality","filteredBase","filter","color","hex","replace","r","parseInt","substr","g","b","brightness","generatedPalette","generateColorVariations","error","console","baseColors","result","nonWhiteColors","push","forEach","darker","Math","max","toString","padStart","saturated","min","shifted","slice","pause","addEventListener","play","catch","e","removeEventListener","togglePlay","onProgressChange","progressBar","currentTarget","clickPosition","clientX","getBoundingClientRect","left","offsetWidth","newTime","document","documentElement","style","setProperty","formatTime","time","isNaN","minutes","floor","seconds","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","album","title","artist","onClick","width","_c","$RefreshReg$"],"sources":["/Users/andrew/Documents/GitHub/music-player/src/components/MusicPlayer.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport LavaLampBlobs from './LavaLampBlobs.jsx';\nimport Controls from './Controls.jsx'; // Import the new Controls component\nimport { getPalette } from 'color-thief-react';\nimport AnimatedBackground from './AnimatedBackground';\nimport ProgressBar from './ProgressBar.jsx';\n\nimport tracks from '../data/tracks.js';\nimport '../styles/MusicPlayer.css';\nimport '../styles/AnimatedBackground.css';\nimport '../styles/Controls.css'; // Import the Controls CSS\n\nconst MusicPlayer = () => {\n  const [trackIndex, setTrackIndex] = useState(0);\n  const [currentTrack, setCurrentTrack] = useState(tracks[0]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [colors, setColors] = useState(null);\n  const [progress, setProgress] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [currentTime, setCurrentTime] = useState(0);\n  \n  const audioRef = useRef(new Audio(currentTrack.audioSrc));\n  const intervalRef = useRef(null);\n\n  // Memoize the nextTrack function\n  const nextTrack = useCallback(() => {\n    const newIndex = (trackIndex + 1) % tracks.length;\n    setTrackIndex(newIndex);\n    setCurrentTrack(tracks[newIndex]);\n  }, [trackIndex]);\n\n  // Memoize previous track function as well\n  const prevTrack = useCallback(() => {\n    const newIndex = (trackIndex - 1 + tracks.length) % tracks.length;\n    setTrackIndex(newIndex);\n    setCurrentTrack(tracks[newIndex]);\n  }, [trackIndex]);\n\n  // Memoize the startTimer function\n  const startTimer = useCallback(() => {\n    clearInterval(intervalRef.current);\n    \n    intervalRef.current = setInterval(() => {\n      if (audioRef.current.ended) {\n        nextTrack();\n      } else {\n        setCurrentTime(audioRef.current.currentTime);\n        setProgress((audioRef.current.currentTime / audioRef.current.duration) * 100);\n      }\n    }, 1000);\n  }, [nextTrack]);\n\n  // Extract colors from album art\n  useEffect(() => {\n    const fetchColors = async () => {\n      try {\n        // Extract base colors from the album art\n        const palette = await getPalette(currentTrack.albumArt, 3, 'hex', {\n          crossOrigin: 'anonymous',\n          quality: 10,\n        });\n        \n        // Filter out white/very light colors\n        const filteredBase = palette.filter(color => {\n          const hex = color.replace('#', '');\n          const r = parseInt(hex.substr(0, 2), 16);\n          const g = parseInt(hex.substr(2, 2), 16);\n          const b = parseInt(hex.substr(4, 2), 16);\n          const brightness = (0.299 * r + 0.587 * g + 0.114 * b);\n          return brightness < 180;\n        });\n        \n        // If we have at least one good color, generate variations\n        if (filteredBase.length > 0) {\n          const generatedPalette = generateColorVariations(filteredBase);\n          setColors(generatedPalette);\n        } else {    \n          // Fallback to preset vibrant colors\n          setColors(['#355c7d', '#6c5b7b', '#c06c84', '#f67280', '#f8b195']);\n        }\n      } catch (error) {\n        console.error('Failed to extract colors:', error);\n        setColors(['#355c7d', '#6c5b7b', '#c06c84', '#f67280', '#f8b195']);\n      }\n    };\n    \n    fetchColors();\n  }, [currentTrack.albumArt]);\n  \n  // Your color variation generation function\n  const generateColorVariations = (baseColors) => {\n    // Your existing implementation\n    const result = [];\n    \n    // Ensure we only work with non-white colors\n    const nonWhiteColors = baseColors.filter(color => {\n      const hex = color.replace('#', '');\n      const r = parseInt(hex.substr(0, 2), 16);\n      const g = parseInt(hex.substr(2, 2), 16);\n      const b = parseInt(hex.substr(4, 2), 16);\n      const brightness = (0.299 * r + 0.587 * g + 0.114 * b);\n      \n      // Stricter brightness threshold to avoid light colors\n      return brightness < 160;\n    });\n    \n    // If no valid colors, use preset colors\n    if (nonWhiteColors.length === 0) {\n      return ['#355c7d', '#6c5b7b', '#c06c84', '#f67280', '#f8b195', '#3f51b5', '#7e57c2', '#4caf50'];\n    }\n    \n    // Add the filtered base colors\n    result.push(...nonWhiteColors);\n    \n    // For each valid color, generate multiple variations\n    nonWhiteColors.forEach(color => {\n      // Extract RGB\n      const hex = color.replace('#', '');\n      let r = parseInt(hex.substr(0, 2), 16);\n      let g = parseInt(hex.substr(2, 2), 16);\n      let b = parseInt(hex.substr(4, 2), 16);\n      \n      // Generate a darker variant\n      const darker = `#${Math.max(0, r - 40).toString(16).padStart(2, '0')}${\n        Math.max(0, g - 40).toString(16).padStart(2, '0')}${\n        Math.max(0, b - 40).toString(16).padStart(2, '0')}`;\n      \n      // Generate a more saturated variant\n      // Increase the dominant color value\n      let max = Math.max(r, g, b);\n      let saturated;\n      if (max === r) {\n        saturated = `#${Math.min(255, r + 30).toString(16).padStart(2, '0')}${\n          Math.max(0, g - 20).toString(16).padStart(2, '0')}${\n          Math.max(0, b - 20).toString(16).padStart(2, '0')}`;\n      } else if (max === g) {\n        saturated = `#${Math.max(0, r - 20).toString(16).padStart(2, '0')}${\n          Math.min(255, g + 30).toString(16).padStart(2, '0')}${\n          Math.max(0, b - 20).toString(16).padStart(2, '0')}`;\n      } else {\n        saturated = `#${Math.max(0, r - 20).toString(16).padStart(2, '0')}${\n          Math.max(0, g - 20).toString(16).padStart(2, '0')}${\n          Math.min(255, b + 30).toString(16).padStart(2, '0')}`;\n      }\n      \n      // Generate a shifted hue by rotating RGB values\n      const shifted = `#${Math.min(255, b).toString(16).padStart(2, '0')}${\n        Math.min(255, r).toString(16).padStart(2, '0')}${\n        Math.min(255, g).toString(16).padStart(2, '0')}`;\n        \n      result.push(darker, saturated, shifted);\n    });\n    \n    // Return up to 10 colors for more variety\n    return result.slice(0, 10);\n  };\n\n  // Handle track loading and setup\n  useEffect(() => {\n    audioRef.current.pause();\n    audioRef.current = new Audio(currentTrack.audioSrc);\n    \n    audioRef.current.addEventListener('loadedmetadata', () => {\n      setDuration(audioRef.current.duration);\n    });\n    \n    audioRef.current.addEventListener('ended', nextTrack);\n    \n    if (isPlaying) {\n      audioRef.current.play().catch(e => console.error(\"Error playing audio:\", e));\n      startTimer();\n    }\n    \n    return () => {\n      audioRef.current.removeEventListener('loadedmetadata', () => {});\n      audioRef.current.removeEventListener('ended', nextTrack);\n      clearInterval(intervalRef.current);\n    };\n  }, [currentTrack, isPlaying, nextTrack, startTimer]);\n\n  // Handle play/pause\n  useEffect(() => {\n    if (isPlaying) {\n      audioRef.current.play().catch(e => console.error(\"Error playing audio:\", e));\n      startTimer();\n    } else {\n      audioRef.current.pause();\n      clearInterval(intervalRef.current);\n    }\n  }, [isPlaying, startTimer]);\n\n  // Cleanup when component unmounts\n  useEffect(() => {\n    return () => {\n      audioRef.current.pause();\n      clearInterval(intervalRef.current);\n    };\n  }, []);\n\n  // Toggle play/pause\n  const togglePlay = () => {\n    setIsPlaying(!isPlaying);\n  };\n\n  // Change track position on progress bar click\n  const onProgressChange = (e) => {\n    const progressBar = e.currentTarget;\n    const clickPosition = (e.clientX - progressBar.getBoundingClientRect().left) / progressBar.offsetWidth;\n    const newTime = clickPosition * audioRef.current.duration;\n    \n    audioRef.current.currentTime = newTime;\n    setCurrentTime(newTime);\n    setProgress(clickPosition * 100);\n  };\n\n  useEffect(() => {\n    if (colors && colors.length > 0) {\n      // Extract RGB from first color\n      const hex = colors[0].replace('#', '');\n      const r = parseInt(hex.substr(0, 2), 16);\n      const g = parseInt(hex.substr(2, 2), 16);\n      const b = parseInt(hex.substr(4, 2), 16);\n      \n      // Update CSS variable for dynamic glow\n      document.documentElement.style.setProperty('--dynamic-glow-color', `${r}, ${g}, ${b}`);\n    }\n  }, [colors]);\n\n  // Format time\n  const formatTime = (time) => {\n    if (time && !isNaN(time)) {\n      const minutes = Math.floor(time / 60);\n      const seconds = Math.floor(time % 60);\n      return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\n    }\n    return \"0:00\";\n  };\n\n  return (\n    <div className=\"player-container\">\n      {/* Animated background component */}\n      <AnimatedBackground colors={colors} />\n      <LavaLampBlobs colors={colors} />\n\n      \n      <div className=\"music-player\">\n        <div className=\"album-cover\">\n          <img \n            src={currentTrack.albumArt} \n            alt={`${currentTrack.album} cover`}\n            crossOrigin=\"anonymous\" \n          />\n        </div>\n        \n        <div className=\"player-controls\">\n          <div className=\"track-info\">\n            <h2 className=\"track-title\">{currentTrack.title}</h2>\n            <p className=\"track-artist\">{currentTrack.artist}</p>\n          </div>\n          \n          <div className=\"progress-container\">\n            <div className=\"progress-bar\" onClick={onProgressChange}>\n              <div className=\"progress\" style={{ width: `${progress}%` }}></div>\n            </div>\n            <div className=\"time-info\">\n              <span className=\"current-time\">{formatTime(currentTime)}</span>\n              <span className=\"total-time\">{formatTime(duration) || currentTrack.duration}</span>\n            </div>\n          </div>\n          \n          {/* Replace the original controls with our new animated Controls component */}\n          <Controls \n            isPlaying={isPlaying}\n            togglePlay={togglePlay}\n            prevTrack={prevTrack}\n            nextTrack={nextTrack}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MusicPlayer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}